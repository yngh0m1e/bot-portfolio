from logic import DB_Manager
from config import *
from telebot import TeleBot, types
from telebot.types import ReplyKeyboardMarkup
import os

# Initialize bot with token
bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove()

# Handlers for bot commands
def start(message):
    keyboard = [['üìÑ Info', '‚ùì Help']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    welcome_message = (
        "üëã *Welcome to the Bot!* üëã\n\n"
        "Choose a command from the menu below to get started.\n"
        "/start üèÅ\n"
        "/info üìñ\n"
        "/help üÜò"
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

def info(message):
    info_message = (
        "üìú *Bot Commands* üìú\n\n"
        "/start - Start the bot and display the main menu\n"
        "/info - Show information about the bot commands\n"
        "/help - Get help on how to use the bot\n\n"
        "*Recent Changes:*\n"
        "- Added handler for setting project description\n"
        "- Added ability to upload project photos\n"
        "- Updated logic methods for inserting/updating project statuses and skills\n"
        "- Implemented usage of these methods in the bot logic"
    )
    bot.send_message(message.chat.id, info_message, parse_mode='Markdown')

def help_command(message):
    help_message = (
        "‚ùì *Help* ‚ùì\n\n"
        "To use this bot, you can start by using the /start command to see the main menu. "
        "From there, you can choose other commands to learn more or get assistance."
    )
    bot.send_message(message.chat.id, help_message, parse_mode='Markdown')
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(func=lambda message: message.text == 'üìù Add Description')
def handle_add_description(message):
    bot.send_message(message.chat.id, "Send me the description of your project:")
    bot.register_next_step_handler(message, save_description)

def save_description(message):
    user_id = message.from_user.id
    project_name = message.text
    description = message.text
    manager.insert_or_update_project(user_id, project_name, description, None, None, None)
    bot.send_message(message.chat.id, "Description added successfully.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(content_types=['photo'])
def handle_project_photo(message):
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_info.file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
        # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        current_dir = os.path.dirname(os.path.realpath(__file__))

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        photos_dir = os.path.join(current_dir, 'photos')

        # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(photos_dir):
            os.makedirs(photos_dir)
    bot.send_message(message.chat.id, "Photo saved successfully.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == 'üìä Manage Statuses')
def handle_manage_statuses(message):
    statuses = manager.get_statuses()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å
    # –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ insert_or_update_status –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞

@bot.message_handler(func=lambda message: message.text == 'üîß Manage Skills')
def handle_manage_skills(message):
    skills = manager.get_skills()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å
    # –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ insert_or_update_skill –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
def main():
    # Initialize the database manager and set up the database
    manager = DB_Manager(DATABASE)
    manager.create_tables()
    manager.default_insert()

    # Add photo column if not exists
    manager.add_photo_column()
    
    # Test insertion or update
    user_id = 1
    project_name = 'Test Project'
    description = 'Description of Test Project'
    url = 'https://www.google.kz/'
    status_id = 1
    photo = 'https://doctor-veterinar.ru/media/k2/items/cache/675d28c04794e3c683f4419536c4c15f_L.jpg'
    
    manager.insert_or_update_project(user_id, project_name, description, url, status_id, photo)
    
    # Verify insertion or update
    print(manager.get_projects(user_id))
    print(manager.get_project_info(user_id, project_name))

    # Insert skill
    manager.insert_skill(user_id, project_name, 'Python')
    print(manager.get_project_skills(project_name))

    # Add bot handlers
    bot.message_handler(commands=['start'])(start)
    bot.message_handler(commands=['info'])(info)
    bot.message_handler(commands=['help'])(help_command)

    # Start polling for messages
    bot.polling()

if __name__ == '__main__':
    main()
